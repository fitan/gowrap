package {{$.name}}

import (
	"context"
	"gorm.io/gorm"
)

type Middleware func(Service) Service

// @impl
//go:generate gk gen -g "myLog:log.go" -g "myTrace:trace.go"  -p true
type Service interface {
	Create(ctx context.Context, v types.{{UpFirst $.name}}) (err error)
	List(ctx context.Context, page int, pageSize int, order string, scopes ...func(db *gorm.DB) *gorm.DB) (list []types.{{UpFirst $.name}}, total int64, err error)
	Delete(ctx context.Context, uuid string) (err error)
	Update(ctx context.Context, uuid string, v types.{{UpFirst $.name}}) (err error)
	Get(ctx context.Context, uuid string) (v types.{{UpFirst $.name}}, err error)
	Filter(ctx context.Context, fieldName string, value string, scopes ...func(db *gorm.DB) *gorm.DB) (list []map[string]interface{}, err error)
	Exist(ctx context.Context, scopes ...func(db *gorm.DB) *gorm.DB) (exist bool, err error)
}

type BaseService struct {
	DB *mygorm.DB
}

func (s *BaseService) Create(ctx context.Context, v types.{{UpFirst $.name}}) (err error) {
	return s.DB.GetDb(ctx).Create(v).Error
}

func (s *BaseService) List(
	ctx context.Context,
	page int,
	pageSize int,
	order string,
	scopes ...func(db *gorm.DB) *gorm.DB,
) (list []types.{{UpFirst $.name}}, total int64, err error) {
	db := s.DB.GetDb(ctx)

	if order == "" || order == "desc" {
		db.Order("id desc")
	} else {
		db.Order("id asc")
	}

	for _, scope := range scopes {
		db = scope(db)
	}

	db.Count(&total)

	if page != 0 && pageSize != 0 {
		db = db.Offset((page - 1) * pageSize).Limit(pageSize)
	}

	return list, total,db.Find(&list).Error
}

func (s *BaseService) Delete(ctx context.Context, uuid string) (err error) {
	return s.DB.GetDb(ctx).Where("uuid = ?", uuid).Delete(&types.{{UpFirst $.name}}{}).Error
}

func (s *BaseService) Update(ctx context.Context, uuid string, v types.{{UpFirst $.name}}) (err error) {
	return s.DB.GetDb(ctx).Model(&types.{{UpFirst $.name}}{}).Where("uuid = ?", uuid).Updates(v).Error
}

func (s *BaseService) Get(ctx context.Context, uuid string) (v types.{{UpFirst $.name}}, err error) {
	return v, s.DB.GetDb(ctx).Where("uuid = ?", uuid).First(&v).Error
}

func (s *BaseService) Filter(
	ctx context.Context,
	fieldName string,
	value string,
	scopes ...func(db *gorm.DB) *gorm.DB,
) (list []map[string]interface{}, err error) {
	db := s.DB.GetDb(ctx).Model(&types.{{UpFirst $.name}}{})
	for _, scope := range scopes {
		db = scope(db)
	}
	return list, db.Select("uuid", fieldName).Group(fieldName).Where(fieldName+" like ?", "%"+value+"%").Find(&list).Error
}

func (s *BaseService) Exist(ctx context.Context, scopes ...func(db *gorm.DB) *gorm.DB) (exist bool, err error) {
	db := s.DB.GetDb(ctx).Model(&types.{{UpFirst $.name}}{})
	for _, scope := range scopes {
		db = scope(db)
	}
	err = db.First(&types.{{UpFirst $.name}}{}).Error
	if err == nil {
		return true, nil
	}
	
	if err == gorm.ErrRecordNotFound {
		return false, nil
	}
	
	return false, err
}

type BaseServiceImpl Service


