package {{$.Vars.pkgName}}

import (
	"context"
	"github.com/pkg/errors"
	"gorm.io/gorm"
)

type Middleware func(Service) Service

//go:generate gowrap gen -g -p ./ -i Service -bt "ce_log:logging.go ce_trace:tracing.go"
type Service interface {
	Create(ctx context.Context, v types.{{$.Vars.objName}}) (err error)
	List(ctx context.Context, page int, pageSize int, order string, filter *types.{{$.Vars.objName}}) (list []types.{{$.Vars.objName}}, total int64, err error)
	Delete(ctx context.Context, uuid string) (err error)
	Update(ctx context.Context, uuid string, v types.{{$.Vars.objName}}) (err error)
	Get(ctx context.Context, uuid string) (v types.{{$.Vars.objName}}, err error)
	Filter(ctx context.Context, fieldName string, value string, filter *types.{{$.Vars.objName}}) (list []map[string]interface{}, err error)
	ByUuids(ctx context.Context, uuids []string) (list []types.{{$.Vars.objName}}, err error)
	GetIdByUuid(ctx context.Context, uuid string) (id int, err error)
	UpdateWithAssociations(ctx context.Context, uuid string, v types.{{$.Vars.objName}}, associations map[string]interface{}) (err error)
	CreateWithAssociations(ctx context.Context, v types.{{$.Vars.objName}}, associations map[string]interface{}) (err error)
	DeleteWithAssociations(ctx context.Context, uuid string, associations map[string]interface{}) (err error)
}

type service struct {
	db *gorm.DB
}

func (s *service) Create(ctx context.Context, v types.{{$.Vars.objName}}) (err error) {
	return s.db.WithContext(ctx).Create(&v).Error
}

func (s *service) List(
	ctx context.Context, page int, pageSize int, order string, filter *types.{{$.Vars.objName}},
) (list []types.{{$.Vars.objName}}, total int64, err error) {
	tx := s.db.WithContext(ctx).Model(&types.{{$.Vars.objName}}{})

	if order != "" {
		tx.Order(order)
	} else {
		tx.Order("id desc")
	}

	if filter != nil {
		tx.Where(filter)
	}

	err = tx.Count(&total).Error
	if err != nil {
		return
	}

	if page != 0 && pageSize != 0 {
		tx.Offset((page - 1) * pageSize).Limit(pageSize)
	}

	return list, total, tx.Find(&list).Error
}

func (s *service) Delete(ctx context.Context, uuid string) (err error) {
	return s.db.WithContext(ctx).Delete(&types.{{$.Vars.objName}}{}, "uuid = ?", uuid).Error
}

func (s *service) Update(ctx context.Context, uuid string, v types.{{$.Vars.objName}}) (err error) {
	return s.db.WithContext(ctx).Model(&types.{{$.Vars.objName}}{}).Where("uuid = ?", uuid).Save(&v).Error
}

func (s *service) Get(ctx context.Context, uuid string) (v types.{{$.Vars.objName}}, err error) {
	return v, s.db.WithContext(ctx).First(&v, "uuid = ?", uuid).Error
}

func (s *service)Filter(ctx context.Context, fieldName string, value string, filter *types.{{$.Vars.objName}}) (list []map[string]interface{}, err error) {
	tx := s.db.WithContext(ctx).Model(&types.{{$.Vars.objName}}{})
	if filter != nil {
		tx = tx.Where(filter)
	}
	return list, tx.Select("uuid", fieldName).Group(fieldName).Where(fieldName+" like ?", "%"+value+"%").Find(&list).Error
}

func (s *service) ByUuids(ctx context.Context, uuids []string) (list []types.{{$.Vars.objName}}, err error) {
	return list, s.db.WithContext(ctx).Model(&types.{{$.Vars.objName}}{}).Where("uuid in (?)", uuids).Find(&list).Error
}

func (s *service) GetIdByUuid(ctx context.Context, uuid string) (id int, err error) {
	err = s.db.WithContext(ctx).Model(&types.{{$.Vars.objName}}{}).Where("uuid = ?", uuid).Select("id").Scan(&id).Error
	return
}

func (s *service) UpdateWithAssociations(ctx context.Context, uuid string, v types.{{$.Vars.objName}}, associations map[string]interface{}) (err error) {
	return s.db.WithContext(ctx).Transaction(func(tx *gorm.DB) error {
		err = tx.Model(&types.{{$.Vars.objName}}{}).Where("uuid = ?", uuid).Save(&v).Error
		if err != nil {
			err = errors.Wrap(err, "save failed")
			return err
		}
		for key, value := range associations {
			err = tx.Model(&v).Association(key).Clear()
			if err != nil {
				err = errors.Wrap(err, "clear association failed")
				return err
			}

			err = tx.Model(&v).Association(key).Append(value)
			if err != nil {
				err = errors.Wrap(err, "append association failed")
				return err
			}
		}

		return nil
	})
}

func (s *service) DeleteWithAssociations(ctx context.Context, uuid string, associations map[string]interface{}) (err error) {
	return s.db.WithContext(ctx).Transaction(func(tx *gorm.DB) error {
		var record types.{{$.Vars.objName}}
		err = tx.Model(&types.{{$.Vars.objName}}{}).Where("uuid = ?", uuid).Delete(&record).Error
		if err != nil {
			err = errors.Wrap(err, "delete failed")
			return err
		}

		for key, _ := range associations {
			err = tx.Model(&record).Association(key).Clear()
			if err != nil {
				err = errors.Wrap(err, "clear association failed")
				return err
			}
		}

		return nil
	})
}

func (s *service) CreateWithAssociations(ctx context.Context, v types.{{$.Vars.objName}}, associations map[string]interface{}) (err error) {
	return s.db.Model(ctx).Transaction(func(tx *gorm.DB) error {
		err = tx.Model(&types.{{$.Vars.objName}}{}).Create(&v).Error
		if err != nil {
			err = errors.Wrap(err, "create failed")
			return err
		}

		for key, value := range associations {
			err = tx.Model(&v).Association(key).Append(value)
			if err != nil {
				err = errors.Wrap(err, "append association failed")
				return err
			}
		}
		return nil
	})
}

func New(db *gorm.DB) Service {
	return &service{db: db}
}
