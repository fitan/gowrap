{{/* gotype: github.com/fitan/gowrap/generator.TemplateInputs */}}
import (
    endpoint "github.com/go-kit/kit/endpoint"
{{range $i := $.Imports}}
    {{$i}}
{{end}}
)


type Endpoints struct {
{{range $m := $.Interface.Methods}}
    {{$m.Name}}Endpoint endpoint.Endpoint
{{end}}
}

func NewEndpoint(s Service, dmw map[string][]endpoint.Middleware) Endpoints {
	eps := Endpoints{
		{{range $m := $.Interface.Methods}}
		{{$m.Name}}Endpoint: make{{$m.Name}}Endpoint(s),
		{{end}}
	}
	{{range $m := $.Interface.Methods}}
	for _, m := range dmw["{{$m.Name}}"] {
		eps.{{$m.Name}}Endpoint = m(eps.{{$m.Name}}Endpoint)
	}
	{{end}}

	return eps
}

{{range $m := $.Interface.Methods}}
func make{{$m.Name}}Endpoint(s Service) endpoint.Endpoint {
	return func(ctx context.Context, request interface{}) (response interface{}, err error) {
		req := request.({{$m.Name}}Request)

		{{range $v := $m.ResultsExcludeErr}}
		var {{$v.Name}} {{$v.Type}}
		{{end}}

		{{$m.ResultsNames}} = s.{{$m.Name}}(
			ctx,
			{{range $v := $m.ParamsExcludeCtx}}req.{{upFirst $v.Name}},{{end}}
		)
		return encode.Response{
			// Todo change map key
			Data: {{$m.ResultsMapExcludeErr}},
			Error: err,
		}, err
	}
}
{{end}}