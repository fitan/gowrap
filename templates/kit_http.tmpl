{{/* gotype: github.com/fitan/gowrap/generator.TemplateInputs */}}
{{$.Import
`"encoding/json"`
`"net/http"`
`"strings"`
`valid "github.com/asaskevich/govalidator"`
`"github.com/go-kit/kit/endpoint"`
`kithttp "github.com/go-kit/kit/transport/http"`
`"github.com/gorilla/mux"`
`"github.com/pkg/errors"`
`"github.com/spf13/cast"`
}}

func MakeHTTPHandler(s Service, dmw []endpoint.Middleware, opts []kithttp.ServerOption) http.Handler {
	var ems []endpoint.Middleware

	opts = append(opts, kithttp.ServerBefore(func(ctx context.Context, request *http.Request) context.Context {
		return ctx
	}))

	ems = append(ems, dmw...)

	eps := NewEndpoint(s, map[string][]endpoint.Middleware{
		{{range $m := $.Interface.Methods}}
            {{$m.Name}}MethodName: ems,
		{{end}}
	})

	r := mux.NewRouter()

	{{range $m := $.Interface.Methods}}
	r.Handle("{{$m.RawKit.Conf.Url}}", kithttp.NewServer(
		eps.{{$m.Name}}Endpoint,
		decode{{$m.Name}}Request,
		encode.JsonResponse,
		opts...,
	)).Methods("{{up $m.RawKit.Conf.UrlMethod}}")
	{{end}}

	return r
}

{{range $m := $.Interface.Methods}}
// {{$m.KitRequest.ServiceName}}
// @Summary {{$m.Annotation}}
// @Description {{$m.Annotation}}
{{$.Interface.Tags}}
// @Accept json
// @Produce json
{{- range $k,$v := $m.KitRequest.Path}}
// @Param {{$v.ParamName}} path {{$v.BasicType}} true {{$v.Annotations}}
{{- end}}
{{- range $k, $v := $m.KitRequest.Query}}
// @Param {{$v.ParamName}} query {{if eq $v.ParamType "slice"}}[]{{end}}{{$v.BasicType}} false {{$v.Annotations}}
{{- end}}
{{- range $k, $v := $m.KitRequest.Header}}
// @Param {{$v.ParamName}} header {{$v.BasicType}} false {{$v.Annotations}}
{{- end}}
{{- if $m.KitRequest.RequestIsBody}}
// @Param {{$m.KitRequest.RequestName}} body {{$m.KitRequest.RequestName}} 	true "http request body"
{{- else}}
{{- range $k, $v := $m.KitRequest.Body}}
// @Param {{$v.ParamName}} body {{$v.BasicType}} true {{$v.Annotations}}
{{- end}}
{{- end}}
// @Success 200 {object} encode.Response{data={{(index $m.Results 0).Type}}}
// @Router {{$m.RawKit.Conf.Url}} [{{$m.RawKit.Conf.UrlMethod}}]
{{$m.KitRequestDecode}}
{{end}}
