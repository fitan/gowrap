{{/* gotype: github.com/fitan/gowrap/generator.TemplateInputs */}}
{{$.Import
`"encoding/json"`
`"net/http"`
`"strings"`
`valid "github.com/asaskevich/govalidator"`
`endpoint "github.com/go-kit/kit/endpoint"`
`kithttp "github.com/go-kit/kit/transport/http"`
`"github.com/gorilla/mux"`
`"github.com/pkg/errors"`
`"github.com/spf13/cast"`
}}

func MakeHTTPHandler(s Service, dmw []endpoint.Middleware, opts []kithttp.ServerOption) http.Handler {
	var ems []endpoint.Middleware

	opts = append(opts, kithttp.ServerBefore(func(ctx context.Context, request *http.Request) context.Context {
		return ctx
	}))

	ems = append(ems, dmw...)

	eps := NewEndpoint(s, map[string][]endpoint.Middleware{
		{{range $m := $.Interface.Methods}}{{if $.Interface.HasMethodPath $m.Name}}
            {{$m.Name}}MethodName: ems,
		{{end}}{{end}}
	})

	r := mux.NewRouter()

	{{range $m := $.Interface.Methods}}{{if $.Interface.HasMethodPath $m.Name}}
	r.Handle("{{$.Interface.MethodPath $m.Name}}", kithttp.NewServer(
		{{$m.KitHttpServiceEndpointName}},
		{{$m.KitHttpServiceDecodeName}},
		{{$m.KitHttpServiceEncodeName}},
		opts...,
	)).Methods("{{up $m.RawKit.Conf.UrlMethod}}")
	{{end}}{{end}}

	return r
}

{{range $m := $.Interface.Methods}}{{if $.Interface.HasMethodPath $m.Name}}
{{if ($.Interface.EnableSwag $m.Name)}}
// {{$m.KitRequest.ServiceName}}
// @Summary {{$m.Annotation}}
// @Description {{$m.Annotation}}
{{$.Interface.Tags}}
// @Accept json
// @Produce json
{{- range $k,$v := $m.KitRequest.Path}}
// @Param {{$v.ParamName}} path string true {{$v.Annotations}}
{{- end}}
{{- range $k, $v := $m.KitRequest.Query}}
// @Param {{$v.ParamName}} query string false {{$v.Annotations}}
{{- end}}
{{- range $k, $v := $m.KitRequest.Header}}
// @Param {{$v.ParamName}} header string false {{$v.Annotations}}
{{- end}}
{{- range $k, $v := $m.KitRequest.Form}}
// @Param {{$v.ParamName}} formData {{$v.FormDataSwagType}} true {{$v.Annotations}}
{{- end}}
{{- if $m.KitRequest.RequestIsBody}}
// @Param {{$m.KitRequest.RequestName}} body {{$m.KitRequest.RequestName}} 	true "http request body"
{{- else}}
{{- range $k, $v := $m.KitRequest.Body}}
// @Param {{$v.ParamName}} body {{$v.ParamTypeName}} true {{$v.Annotations}}
{{- end}}
{{- end}}
// @Success 200 {object} encode.Response{ {{- $m.SwagFieldData}}}
// @Router {{$.Interface.MethodPath $m.Name}} [{{$m.RawKit.Conf.UrlMethod}}]{{end}}
{{$m.KitRequestDecode}}
{{end}}{{end}}
