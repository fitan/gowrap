{{$.Import `"go.opentelemetry.io/otel/trace"` `"go.uber.org/zap"` `ginkHttp "github.com/fitan/gink/transport/http"`}}



{{ $decorator := (or .Vars.DecoratorName (printf "%sWithLog" .Interface.Name)) }}

// {{$decorator}} implements {{.Interface.Type}} that is instrumented with logging
type {{$decorator}} struct {
  _log *zap.SugaredLogger
  _base {{.Interface.Type}}
}

// New{{$decorator}} instruments an implementation of the {{.Interface.Type}} with simple logging
func New{{$decorator}}(base {{.Interface.Type}},log *zap.SugaredLogger) {{$decorator}} {
  return {{$decorator}}{
    _base: base, 
    _log: log,
  }
}

{{range $method := .Interface.Methods}}
  // {{$method.Name}} implements {{$.Interface.Type}}
  func (_d {{$decorator}}) {{$method.Declaration}} {
      {{if $method.AcceptsContext}}
          _log := _d._log.With(zap.String("traceId", trace.SpanFromContext(ctx).SpanContext().TraceID().String()))
      {{else}}
          _log := _d._log
      {{end}}

      debug, _ := ctx.Value(ginkHttp.ContextKeyRequestDebug).(bool)


      defer func() {

        {{- if $method.HasResults}}
          {{- if $method.ReturnsError}}
            if debug {
            if err == nil {
                _log.Infow("with_log calling {{$method.Name}}","params", {{$method.ParamsMapExcludeCtx}}, "results", {{$method.ResultsMapErr2Str}})
            }

            if err != nil {
                _log.Errorw("with_log calling {{$method.Name}}","params", {{$method.ParamsMapExcludeCtx}}, "results", {{$method.ResultsMapErr2Str}})
            }

          }
          if !debug && err == nil {
            _log.Debugw("with_log calling {{$method.Name}}", "params", {{$method.ParamsMapExcludeCtx}}, "results", {{$method.ResultsMapErr2Str}})
          }

            if err != nil && !debug {
              _log.Errorw("with_log calling {{$method.Name}}","params", {{$method.ParamsMapExcludeCtx}}, "results", {{$method.ResultsMapErr2Str}})
            }
          {{else}}
          if debug {
            _log.Infow("with_log calling {{$method.Name}}","params", {{$method.ParamsMapExcludeCtx}}, "results", {{$method.ResultsMapErr2Str}})
          }
          {{end -}}
        {{end -}}
      }()
      {{ $method.Pass "_d._base." }}
  }
{{end}}
