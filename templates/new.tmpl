{{/* gotype: github.com/fitan/gowrap/generator.TemplateInputs */}}
package {{.Interface.Name}}

import (
	"github.com/fitan/gink/transport/http"
	"github.com/go-kit/kit/endpoint"
	"github.com/go-kit/kit/metrics/prometheus"
	stdprometheus "github.com/prometheus/client_golang/prometheus"
	"go.opentelemetry.io/contrib/instrumentation/github.com/go-kit/kit/otelkit"
	"go.uber.org/zap"
	"hello/pkg/mid"
    "github.com/google/wire"
)


type Middleware func({{upFirst .Interface.Name}}Service) {{upFirst .Interface.Name}}Service

func NewServiceMiddleware(logger *zap.SugaredLogger) (mw []Middleware) {
	mw = []Middleware{}
	// Append your middleware here
	mw = append(mw, func({{upFirst .Interface.Name}}Service {{upFirst .Interface.Name}}Service) {{upFirst .Interface.Name}}Service {
		return New{{upFirst .Interface.Name}}ServiceWithPrometheus({{upFirst .Interface.Name}}Service)
	})
	mw = append(mw, func({{upFirst .Interface.Name}}Service {{upFirst .Interface.Name}}Service) {{upFirst .Interface.Name}}Service {
		return New{{upFirst .Interface.Name}}ServiceWithLog({{upFirst .Interface.Name}}Service, logger)
	})
	mw = append(mw, func({{upFirst .Interface.Name}}Service {{upFirst .Interface.Name}}Service) {{upFirst .Interface.Name}}Service {
		return New{{upFirst .Interface.Name}}ServiceWithTracing({{upFirst .Interface.Name}}Service)
	})
	return
}

// New returns a {{upFirst .Interface.Name}}Service with all of the expected middleware wired in.
func NewService(svc BaseService, middleware []Middleware) {{upFirst .Interface.Name}}Service {

	for _, m := range middleware {
		svc = m(svc)
	}
	return svc
}
{{if eq .Vars.initType "kit"}}
func NewEndpointMiddleware(logger *zap.SugaredLogger, ep []endpoint.Middleware) Mws {
	mws := make(Mws)
	// Add you endpoint middleware here
	otelkitEMW := func(n string) endpoint.Middleware {
		return otelkit.EndpointMiddleware(otelkit.WithOperation(n))
	}

	AddEndpointMiddlewareToAllMethodsWithMethodName(mws, otelkitEMW)
	for _, e := range ep {
		AddEndpointMiddlewareToAllMethods(mws, e)
	}

	return mws
}

func NewServiceOption(op []http.ServerOption) Ops {
	ops := make(Ops)
	for _, o := range op {
		AddHttpOptionToAllMethods(ops, o)
	}
	return ops
}
{{end}}

{{if (eq .Vars.initType "kit")}}
	var {{upFirst .Interface.Name}}KitSet = wire.NewSet(NewBasicService, NewService, NewEndpointMiddleware, NewServiceMiddleware, NewEndpoints, NewServiceOption, NewHTTPHandler)
{{end}}
{{if (eq .Vars.initType "service" )}}
	var {{upFirst .Interface.Name}}ServiceSet = wire.NewSet(NewBasicService, NewService, NewServiceMiddleware)
{{end}}