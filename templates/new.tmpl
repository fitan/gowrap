{{/* gotype: github.com/fitan/gowrap/generator.TemplateInputs */}}

package {{.Interface.Name}}

import "go.uber.org/zap"

type Middleware func({{upFirst .Interface.Name}}Service) {{upFirst .Interface.Name}}Service

func NewServiceMiddleware(logger *zap.SugaredLogger) (mw []Middleware) {
	mw = []Middleware{}
	// Append your middleware here
	mw = append(mw, func({{upFirst .Interface.Name}}Service {{upFirst .Interface.Name}}Service) {{upFirst .Interface.Name}}Service {
		return New{{upFirst .Interface.Name}}ServiceWithPrometheus({{upFirst .Interface.Name}}Service, "{{.Vars.instance}}.{{upFirst .Interface.Name}}")
	})
	mw = append(mw, func({{upFirst .Interface.Name}}Service {{upFirst .Interface.Name}}Service) {{upFirst .Interface.Name}}Service {
		return New{{upFirst .Interface.Name}}ServiceWithLog({{upFirst .Interface.Name}}Service, logger)
	})
	mw = append(mw, func({{upFirst .Interface.Name}}Service {{upFirst .Interface.Name}}Service) {{upFirst .Interface.Name}}Service {
		return New{{upFirst .Interface.Name}}ServiceWithTracing({{upFirst .Interface.Name}}Service)
	})
	return
}

// New returns a {{upFirst .Interface.Name}}Service with all of the expected middleware wired in.
func NewService(svc BaseService, middleware []Middleware) {{upFirst .Interface.Name}}Service {

	for _, m := range middleware {
		svc = m(svc)
	}
	return svc
}